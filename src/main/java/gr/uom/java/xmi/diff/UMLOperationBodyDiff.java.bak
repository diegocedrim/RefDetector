package gr.uom.java.xmi.diff;

import gr.uom.java.xmi.AccessedMember;
import gr.uom.java.xmi.FieldAccess;
import gr.uom.java.xmi.MethodCall;
import gr.uom.java.xmi.UMLOperation;

import java.util.LinkedHashSet;
import java.util.Set;
import java.util.TreeSet;

public class UMLOperationBodyDiff implements Comparable<UMLOperationBodyDiff> {
	private UMLOperation originalOperation;
	private Set<AccessedMember> addedAccessedMembers;
	private Set<AccessedMember> removedAccessedMembers;
	
	public UMLOperationBodyDiff(UMLOperation operation1, UMLOperation operation2) {
		this.originalOperation = operation1;
		this.addedAccessedMembers = new LinkedHashSet<AccessedMember>();
		this.removedAccessedMembers = new LinkedHashSet<AccessedMember>();
		Set<AccessedMember> accessedMembers1 = operation1.getAccessedMembers();
		Set<AccessedMember> accessedMembers2 = operation2.getAccessedMembers();
		for(AccessedMember accessedMember : accessedMembers1) {
			if(!accessedMembers2.contains(accessedMember))
				removedAccessedMembers.add(accessedMember);
		}
		for(AccessedMember accessedMember : accessedMembers2) {
			if(!accessedMembers1.contains(accessedMember))
				addedAccessedMembers.add(accessedMember);
		}
	}

	public UMLOperation getOriginalOperation() {
		return originalOperation;
	}

	public Set<AccessedMember> getAddedAccessedMembers() {
		return addedAccessedMembers;
	}

	public Set<AccessedMember> getRemovedAccessedMembers() {
		return removedAccessedMembers;
	}

	public Set<MethodCall> getAddedMethodCalls() {
		Set<MethodCall> addedMethodCalls = new LinkedHashSet<MethodCall>();
		for(AccessedMember accessedMember : addedAccessedMembers) {
			if(accessedMember instanceof MethodCall)
				addedMethodCalls.add((MethodCall)accessedMember);
		}
		return addedMethodCalls;
	}

	public Set<MethodCall> getRemovedMethodCalls() {
		Set<MethodCall> removedMethodCalls = new LinkedHashSet<MethodCall>();
		for(AccessedMember accessedMember : removedAccessedMembers) {
			if(accessedMember instanceof MethodCall)
				removedMethodCalls.add((MethodCall)accessedMember);
		}
		return removedMethodCalls;
	}

	public Set<FieldAccess> getAddedFieldAccesses() {
		Set<FieldAccess> addedFieldAccesses = new LinkedHashSet<FieldAccess>();
		for(AccessedMember accessedMember : addedAccessedMembers) {
			if(accessedMember instanceof FieldAccess)
				addedFieldAccesses.add((FieldAccess)accessedMember);
		}
		return addedFieldAccesses;
	}

	public Set<FieldAccess> getRemovedFieldAccesses() {
		Set<FieldAccess> removedFieldAccesses = new LinkedHashSet<FieldAccess>();
		for(AccessedMember accessedMember : removedAccessedMembers) {
			if(accessedMember instanceof FieldAccess)
				removedFieldAccesses.add((FieldAccess)accessedMember);
		}
		return removedFieldAccesses;
	}

	public boolean isEmpty() {
		return addedAccessedMembers.isEmpty() && removedAccessedMembers.isEmpty();
	}

	public String toString() {
		StringBuilder sb = new StringBuilder();
		if(!isEmpty())
			sb.append("\t").append("operation ").append(originalOperation.toString()).append("\n");
		Set<AccessedMember> sortedRemovedAccessedMembers = new TreeSet<AccessedMember>(removedAccessedMembers);
		for(AccessedMember accessedMember : sortedRemovedAccessedMembers) {
			String type = null;
			if(accessedMember instanceof MethodCall)
				type = "method call";
			else if(accessedMember instanceof FieldAccess)
				type = "field access";
			sb.append("\t\t").append(type + " " + accessedMember + " removed").append("\n");
		}
		Set<AccessedMember> sortedAddedAccessedMembers = new TreeSet<AccessedMember>(addedAccessedMembers);
		for(AccessedMember accessedMember : sortedAddedAccessedMembers) {
			String type = null;
			if(accessedMember instanceof MethodCall)
				type = "method call";
			else if(accessedMember instanceof FieldAccess)
				type = "field access";
			sb.append("\t\t").append(type + " " + accessedMember + " added").append("\n");
		}
		return sb.toString();
	}

	public int compareTo(UMLOperationBodyDiff operationBodyDiff) {
		return this.originalOperation.toString().compareTo(operationBodyDiff.originalOperation.toString());
	}
}
